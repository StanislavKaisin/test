{"version":3,"sources":["helpers/getMonthFromBirtday.ts","hooks/useAPI.ts","helpers/getMonthsFromUsers.ts","helpers/getUsersPerMonth.ts","helpers/setCoor.ts","components/CircularUnderLoad.tsx","components/TooltipItem.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getMonthFromBirtday","user","dob","split","slice","join","useAPI","useState","users","setUsers","months","setMonths","usersPerMonth","setUsersPerMonth","error","setError","loading","setLoading","useEffect","axios","get","then","data","length","monthsList","allMonths","Set","forEach","add","Array","from","sort","getMonthsFromUsers","month","push","color","userMonth","find","item","name","firstName","lastName","usersAmount","setColor","getUsersPerMonth","catch","CircularUnderLoad","CircularProgress","disableShrink","HtmlTooltip","withStyles","theme","tooltip","backgroundColor","maxWidth","fontSize","typography","pxToRem","border","Tooltip","TooltipItem","props","usersList","map","key","title","Fragment","Typography","Button","style","margin","App","console","log","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ab648808.chunk.js","sourcesContent":["import { User } from \"../interfaces/User\";\r\n\r\nexport const getMonthFromBirtday = (user: User): string => {\r\n  const month = user.dob.split(\"-\").slice(0, 2).join(\"-\");\r\n  return month;\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { getMonthsFromUsers } from \"../helpers/getMonthsFromUsers\";\r\nimport { getUsersPerMonth } from \"../helpers/getUsersPerMonth\";\r\nimport { UsersPerMonth } from \"../interfaces/UsersPerMonth\";\r\n\r\nconst API = `https://yalantis-react-school-api.yalantis.com/api/task0/users`;\r\n\r\nexport function useAPI() {\r\n  const [users, setUsers] = useState([]);\r\n  const [months, setMonths] = useState<string[]>([]);\r\n  const [usersPerMonth, setUsersPerMonth] = useState<UsersPerMonth[]>([]);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    axios\r\n      .get(API)\r\n      .then((data) => {\r\n        setUsers(data.data);\r\n        if (data.data?.length) {\r\n          const monthsList = getMonthsFromUsers(data.data);\r\n          const users = getUsersPerMonth(monthsList, data.data);\r\n          setUsersPerMonth(users);\r\n          setMonths(monthsList);\r\n        }\r\n        setLoading(false);\r\n        return { users };\r\n      })\r\n      .catch((error) => {\r\n        setError(error);\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n  return { users, error, loading, months, usersPerMonth };\r\n}\r\n","import { User } from \"../interfaces/User\";\r\nimport { getMonthFromBirtday } from \"./getMonthFromBirtday\";\r\n\r\nexport const getMonthsFromUsers = (users: User[]): string[] => {\r\n  let allMonths = new Set();\r\n  users.forEach((user) => {\r\n    allMonths.add(getMonthFromBirtday(user));\r\n  });\r\n  const months = Array.from(allMonths).sort() as string[];\r\n  return months;\r\n};\r\n","import { User } from \"../interfaces/User\";\r\nimport { getMonthFromBirtday } from \"./getMonthFromBirtday\";\r\nimport { UsersPerMonth } from \"../interfaces/UsersPerMonth\";\r\nimport { setColor } from \"./setCoor\";\r\n\r\nexport const getUsersPerMonth = (\r\n  months: string[],\r\n  users: User[]\r\n): UsersPerMonth[] => {\r\n  const usersPerMonth: { month: string; color: string; users: never[] }[] = [];\r\n  months.forEach((month) => {\r\n    usersPerMonth.push({ month, color: \"\", users: [] });\r\n  });\r\n  users.forEach((user) => {\r\n    const userMonth = getMonthFromBirtday(user);\r\n    usersPerMonth.find(\r\n      (item: { month: string; color: string; users: { name: string }[] }) => {\r\n        if (item.month === userMonth) {\r\n          item.users.push({\r\n            name: `${user.firstName} ${user.lastName}`,\r\n          });\r\n        }\r\n      }\r\n    );\r\n  });\r\n  usersPerMonth.forEach(\r\n    (item: { month: string; color: string; users: { name: string }[] }) => {\r\n      item.color = setColor(item.users);\r\n    }\r\n  );\r\n  return usersPerMonth;\r\n};\r\n","export const setColor = (users: { name: string }[]) => {\r\n  let color;\r\n  const usersAmount: Number = users.length;\r\n  switch (true) {\r\n    case 0 <= usersAmount && usersAmount <= 2:\r\n      color = \"#cccccc\";\r\n      break;\r\n    case 3 <= usersAmount && usersAmount <= 6:\r\n      color = \"#b3b3ff\";\r\n      break;\r\n    case 7 <= usersAmount && usersAmount <= 10:\r\n      color = \"#80ff80\";\r\n      break;\r\n    default:\r\n      color = \"#ff9999\";\r\n      break;\r\n  }\r\n  return color;\r\n};\r\n","import React from \"react\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nexport default function CircularUnderLoad() {\r\n  return <CircularProgress disableShrink />;\r\n}\r\n","import React from \"react\";\r\nimport { withStyles, Theme } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst HtmlTooltip = withStyles((theme: Theme) => {\r\n  return {\r\n    tooltip: {\r\n      backgroundColor: \"#f5f5f9\",\r\n      color: \"rgba(0, 0, 0, 0.87)\",\r\n      maxWidth: 150,\r\n      fontSize: theme.typography.pxToRem(12),\r\n      border: \"1px solid #dadde9\",\r\n    },\r\n  };\r\n})(Tooltip);\r\n\r\nexport default function TooltipItem(props: {\r\n  month: string;\r\n  color: string;\r\n  users: { name: string }[];\r\n}) {\r\n  const { month, color, users } = props;\r\n  const usersList = users.map((user) => <p key={user.name}>{user.name}</p>);\r\n  return (\r\n    <div>\r\n      <HtmlTooltip\r\n        title={\r\n          <React.Fragment>\r\n            <Typography color=\"inherit\">Users were born:</Typography>\r\n            {users.length && usersList}\r\n          </React.Fragment>\r\n        }\r\n      >\r\n        <Button style={{ backgroundColor: color, margin: \"0.1rem\" }}>\r\n          {month}\r\n        </Button>\r\n      </HtmlTooltip>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\n\nimport \"./App.css\";\n\nimport { useAPI } from \"./hooks/useAPI\";\nimport CircularUnderLoad from \"./components/CircularUnderLoad\";\nimport TooltipItem from \"./components/TooltipItem\";\n\nfunction App() {\n  const { error, loading, usersPerMonth } = useAPI();\n  if (error) {\n    console.log(error);\n    return (\n      <div className=\"App\">\n        <h2>Something went wrong...</h2>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      {loading ? (\n        <CircularUnderLoad />\n      ) : (\n        <div className=\"months\">\n          <h2>LIST OF THE MONTHS:</h2>\n          {usersPerMonth.length &&\n            usersPerMonth.map((month) => {\n              return (\n                <TooltipItem\n                  key={month.month}\n                  month={month.month}\n                  color={month.color}\n                  users={month.users}\n                />\n              );\n            })}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}